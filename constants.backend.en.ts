import type { SkillLevel } from './types';

export const CAREER_PATH_DATA_BACKEND_EN: SkillLevel[] = [
  {
    level: 1,
    title: "Intern / Apprentice",
    experience: "2-3 months",
    goal: "Understand the fundamentals of software development and web backend basics. Learn to read and write basic code, use essential tools, and grasp what happens behind a simple web request.",
    hardSkills: [
      "Internet & Networking Basics - Request/Response: What happens when you enter a URL in the browser",
      "Internet & Networking Basics - IP Address & Port: Understand what 127.0.0.1:8000 means",
      "Internet & Networking Basics - DNS: What domain names are and how they resolve",
      "Internet & Networking Basics - HTTP: Basic methods: GET, POST; status codes 200, 404",
      "Software Development Fundamentals - Syntax & Control Flow: if, else, for, while, switch",
      "Software Development Fundamentals - Variables & Types: int, string, float, arrays, dictionaries",
      "Software Development Fundamentals - Functions: Input/output, defining reusable code",
      "Databases - What is a DB: Why we store data in structured systems",
      "Databases - SQL vs NoSQL: Very high-level (relational vs document-based)",
      "Databases - SQL Basics: SELECT, INSERT, UPDATE, DELETE, WHERE, LIMIT",
      "Databases - Schema Creation: CREATE TABLE, column types, simple constraints",
      "Git (via CLI) - Purpose of Git: Version control & team collaboration",
      "Git (via CLI) - Git Basics: init, clone, status, add, commit",
      "Git (via CLI) - .gitignore: What and why",
      "Git (via CLI) - Undo Changes: checkout, restore, reset (no hard resets yet)",
      "Git (via CLI) - Branching: git branch, git checkout -b",
      "Git (via CLI) - History: git log and understanding HEAD",
      "Linux - Purpose of Linux: Servers, dev environments, containers",
      "Linux - Basic CLI: ls, cd, pwd, mkdir, cat, tail, rm, etc.",
      "Linux - Editing Files: nano, optional vim",
      "Linux - Installing Software: apt install, yum, package managers",
      "PHP (Procedural Level) - Syntax: Echo, if-else, loops",
      "PHP (Procedural Level) - Arrays: Index-based and associative",
      "PHP (Procedural Level) - Associative arrays & loops: Iterating with logic",
      "PHP (Procedural Level) - Functions: Purpose and use",
      "PHP (Procedural Level) - Superglobals: $_GET, $_POST",
      "Laravel Basics - What is Laravel: Framework purpose",
      "Laravel Basics - Structure: MVC, directory overview",
      "Laravel Basics - Routing: Basic web.php routing",
      "Laravel Basics - Models & Controllers: Generating and using",
      "Laravel Basics - Composer: Installing a package (e.g. faker)",
    ],
    softSkills: [
      "Communication: Ask clear questions, share status updates regularly",
      "Willingness to Learn: Accept feedback, show curiosity",
      "Time Management: Follow schedule and report blockers",
      "Team Awareness: Understand they are in a support role, not leading",
    ],
    responsibilities: [
      "Learns fundamentals and assists with basic tasks under guidance.",
    ],
    roadmap: {
      months: [
        "Month 1: Intro to Internet, DNS, HTTP, request-response",
        "Month 1: Basic Linux commands",
        "Month 1: Git basics (commit, branch, log)",
        "Month 1: PHP basics (syntax, variables, loops, functions)",
        "Month 1: SQL: SELECT, WHERE, INSERT",
        "Month 2: Git branching, .gitignore, restoring files",
        "Month 2: PHP: arrays, functions, GET/POST",
        "Month 2: Laravel: directory structure, routes, controllers",
        "Month 2: SQL: UPDATE, DELETE, simple JOIN",
        "Month 2: Linux: file editing, package installation",
        "Month 2: HTTP deeper (status codes, headers)",
        "Month 3: Starting a test project",
        "Month 3: Testing learned techniques in real scenario",
        "Month 3: Trying to understand business logic and implementation",
      ],
      goals: ["Suggested practice: build a basic app to list students (PHP), with Laravel routes, store in MySQL, and version the project with Git"]
    },
    practicalTasks: [
        "? Software Dev: Write a function that counts vowels in a string",
        "? Database: Write a SQL query to get names of all users older than 18",
        "? Git: Create a feature branch, commit a change with a proper message, show your git log",
        "? Linux: Navigate to a folder, create a file, write into it using nano, then read the content",
        "? PHP: Create a script that accepts a GET parameter and prints a greeting",
        "? Laravel: Create a route that returns a static string, then a controller that returns the same",
    ],
    timeEstimate: { fullTime: "3 months", partTime: "4-5 months" },
  },
  {
    level: 2,
    title: "Junior I",
    experience: "3-4 months",
    goal: "Be able to build simple backend features with clear requirements, use Git and database workflows independently, understand HTTP and basic web application design, and write maintainable code under guidance.",
    hardSkills: [
        "Internet & HTTP - HTTP methods: Understand full CRUD cycle (GET, POST, PUT, DELETE)",
        "Internet & HTTP - Status codes: Familiarity with 200, 201, 204, 400, 401, 403, 404, 500",
        "Internet & HTTP - Headers & Body: Understand content-type, authorization, etc.",
        "Internet & HTTP - Request lifecycle: From browser to controller, to DB, and back",
        "Software Development - Code organization: Intro to reusable code structure (splitting files, modules)",
        "Software Development - Error handling: Try/catch, input validation, debugging basics",
        "Software Development - Data validation: Manual and framework-supported (e.g., Laravel's validation)",
        "Software Development - API response structure: JSON responses, error messages, status codes",
        "Data Structures & Algorithms - Arrays/Lists: Use, indexing, simple iteration",
        "Data Structures & Algorithms - Hash maps: Associative arrays, key-value lookup in PHP",
        "Data Structures & Algorithms - Stacks/Queues: Awareness; basic use cases in code",
        "Data Structures & Algorithms - Sorting/Searching: Bubble sort, linear/binary search (concepts)",
        "Data Structures & Algorithms - Big O basics: O(1), O(n) — what they mean in code",
        "Database - Joins: INNER JOIN, LEFT JOIN",
        "Database - Relationships: One-to-many and many-to-many (conceptual level)",
        "Database - Query filtering: WHERE, LIKE, ORDER BY, LIMIT/OFFSET",
        "Database - Indexes (light intro): What they are and when they help",
        "Database - Query builder basics: Laravel's DB::table()->where()->get() syntax",
        "Database - NoSQL (intro): MongoDB: document structure, basic queries, use cases, ELK stack intro",
        "Git (Intermediate CLI) - Branching workflow: Feature branch, rebase vs merge (intro)",
        "Git (Intermediate CLI) - Stashing: git stash, when and how to use it",
        "Git (Intermediate CLI) - Conflict resolution: Manual resolution and merge conflict reasoning",
        "Git (Intermediate CLI) - Tags & releases: How to tag versions and why it matters",
        "Git (Intermediate CLI) - Cherry-pick (optional): For specific use-cases only, basic idea",
        "Linux - Permissions: chmod, chown, execution rights",
        "Linux - Background tasks: &, nohup, ps, kill",
        "Linux - Shell scripting basics: Write a simple .sh script to automate something",
        "PHP - String manipulation: explode, implode, substr, str_replace",
        "PHP - Form handling: Validating and processing form input",
        "PHP - File upload basics: Understanding $_FILES, storage folders",
        "Laravel - Routes (named & parameterized): Route::get('/user/{id}')",
        "Laravel - Controllers: Returning JSON, interacting with models",
        "Laravel - Blade basics: Simple templating, loops, ifs, includes",
        "Laravel - Request validation: Using FormRequest or validate() method",
        "Laravel - Eloquent basics: CRUD operations using models",
        "Service Communication - REST: Core principles, verbs, status codes",
        "Service Communication - JSON: Data exchange format, basic serialization",
        "Service Communication - HTTP: Request/response model, headers, method",
    ],
    softSkills: [
        "Task ownership: Finish assigned work with help, ask for clarification",
        "Communication: Proactively ask when stuck, explain progress or blockers",
        "Responsibility: Follows basic code conventions, reviews own code before asking for feedback",
        "Curiosity: Starts asking “why” things work the way they do",
        "Feedback: Receives and applies feedback respectfully and accurately",
    ],
    responsibilities: [
        "Works on simple tasks independently with supervision and feedback.",
    ],
    roadmap: {
      months: [
        "Month 1: Improve knowledge of HTTP lifecycle and status codes",
        "Month 1: Deepen Git knowledge: branching, merging, and log inspection",
        "Month 1: Learn form validation and POST routes in Laravel",
        "Month 1: Understand simple Eloquent queries and CRUD controllers",
        "Month 2-3: Relational DB concepts: joins, relationships",
        "Month 2-3: Write routes with parameters and validation",
        "Month 2-3: Work on a mini-project (e.g., blog or task manager)",
        "Month 2-3: Learn to deploy a Laravel app locally with .env and SQLite or MySQL",
        "Month 4 (optional stretch): Intro to APIs: JSON structure, response formats, pagination",
        "Month 4 (optional stretch): Contribute a small feature to a team project (under guidance)",
        "Month 4 (optional stretch): Write a short shell script to automate dev setup or backup",
      ],
      goals: ["Allows proper time for mentoring, confidence-building, and minor feature contributions."]
    },
    practicalTasks: [
        "Write an API that receives a user ID and returns their name from DB",
        "Join query that returns all posts with the user name",
        "Create a feature branch, solve a task, and create a merge request",
        "Handle a form, validate input, store it in DB, and show confirmation",
        "Write a basic bash script to back up a folder",
    ],
    quizzes: [
        "What's the difference between INNER JOIN and LEFT JOIN?",
        "What happens if a merge conflict occurs in Git? How do you resolve it?",
        "What does HTTP status 403 mean? When would you return it?",
        "What is CSRF and how does Laravel handle it?",
    ],
    timeEstimate: { fullTime: "4 months", partTime: "6 months" },
  },
    {
    level: 3,
    title: "Junior II",
    experience: "4-5 months",
    goal: "Deliver small backend features independently, understand the full request lifecycle, write basic tests, and begin forming habits around clean code, simple design, and error handling. Can take a task from spec to merge request with review.",
    hardSkills: [
        "HTTP & Web Application Flow - Request lifecycle: Deep understanding: route → controller → model → DB → response",
        "HTTP & Web Application Flow - REST standards: Resource-based APIs, verbs, and status code alignment",
        "HTTP & Web Application Flow - Headers: Authorization, Content-Type, Accept",
        "HTTP & Web Application Flow - Pagination: Basic implementation using Laravel (paginate() or manual offset/limit)",
        "Software Development - Clean Code basics: Naming, comments, structure, avoiding repetition",
        "Software Development - Reusability: DRY principles, extracting helpers and services",
        "Software Development - Error handling: Meaningful error messages, logging basics",
        "Software Development - Debugging: Laravel debugger, dd(), dump(), basic stack trace reading",
        "Data Structures & Algorithms - Arrays/Lists: Iteration, search, built-in methods in PHP/Python",
        "Data Structures & Algorithms - Hash maps: Dictionary/associative array, set operations",
        "Data Structures & Algorithms - Stacks/Queues: Use in parsing, scheduling, BFS/DFS (awareness)",
        "Data Structures & Algorithms - Sorting algos: Selection, insertion, built-in sort, stability",
        "Data Structures & Algorithms - Time complexity: O(1), O(n), O(log n), real-world implications",
        "Data Structures & Algorithms - Problem-solving: Leetcode/HackerRank: easy-medium challenges",
        "Database - Query optimization: EXPLAIN, LIMIT, using indexes practically",
        "Database - Data types: Choosing proper types and lengths",
        "Database - Relationship usage: Eloquent: hasMany, belongsTo, with(), eager loading",
        "Database - Migrations: Create/update migrations, nullable/default/unique columns",
        "Database & Messaging - Relational DB basics: Tables, rows, columns, basic SQL (SELECT/INSERT/UPDATE/DELETE)",
        "Database & Messaging - Schema design: Primary keys, foreign keys, normalization (intro)",
        "Database & Messaging - Indexes (intro): What is an index, why use it",
        "Database & Messaging - Simple joins: INNER JOIN, LEFT JOIN basics",
        "Database & Messaging - Redis: What is an in-memory key-value store, Caching",
        "Database & Messaging - Messaging (awareness): What is a message queue, simple use case",
        "Database & Messaging - Search DBs: Elasticsearch: Aggregations (terms, sum, cardinality), Querying (bool, wildcard query) and Sorting",
        "Git - PR workflow: Open a MR/PR, write a clear description, follow template",
        "Git - Rebase vs Merge: Understand both (no need to master rebase yet)",
        "Git - GitHub/GitLab etiquette: Commenting, assigning, reviewing basic PRs",
        "Linux & CLI - Bash scripting: Read/write a .sh file to automate app setup",
        "Linux & CLI - Crontab: Set up a basic scheduled task",
        "Linux & CLI - File permissions: Understand 755 vs 644, etc.",
        "PHP - Form requests: Using Laravel's validation objects",
        "PHP - File upload logic: Save to disk, store file path in DB",
        "PHP - Auth: Laravel Breeze/Jetstream or manual session login",
        "PHP - Helpers: Custom helper functions for formatting and logic reuse",
        "Laravel - Middleware: What they do, how to register custom ones",
        "Laravel - Service Container: Dependency Injection, ServiceContainer",
        "Laravel - Eloquent relationships: Full cycle: define → use → query with with(), Lazy loading and eager loading",
        "Laravel - Validation: Required, regex, sometimes, custom messages",
        "Laravel - Service Layer: Intro to using services instead of fat controllers",
        "Laravel - Artisan commands: Write custom commands for automation",
        "Laravel - Config & env: Multi-environment setup, using .env, config()",
        "Laravel - Blade components: Clean templating for modular UI (if needed)",
        "Service Communication - REST: Resource design, idempotency, status codes",
        "Service Communication - GraphQL: Awareness, query/mutation concept",
        "Service Communication - WebSockets: Real-time comms (intro/awareness)",
    ],
    softSkills: [
        "Time estimation: Begins to estimate task durations (with guidance)",
        "Collaboration: Can participate in team discussions and code reviews",
        "Clarity: Starts writing clearer comments and commit messages",
        "Reliability: More consistent delivery of small tasks",
        "Accountability: Learns from mistakes and owns assigned tasks",
    ],
    responsibilities: [
        "Handles small features, shows reliable delivery, begins independent work.",
    ],
    roadmap: {
      months: [
        "Month 1: RESTful concepts, clean routing, better error messages",
        "Month 1: Basic pagination, filters, query builders",
        "Month 1: Eloquent relationships and eager loading",
        "Month 2: Form requests and custom validation rules",
        "Month 2: File handling with Laravel and saving uploads",
        "Month 2: Write helper and service classes for reuse",
        "Month 2: Start using cron and bash scripts",
        "Month 3-4: Code cleanup, better naming, consistent Git usage",
        "Month 3-4: Work with team through small PRs, with code review",
        "Month 3-4: Improve SQL performance with EXPLAIN and indexes",
        "Month 3-4: Authentication system using Laravel Breeze (or basic session-based)",
      ],
      goals: ["Suggested project: A small todo app with auth, relationships (e.g., task -> category), file uploads, and pagination."]
    },
    practicalTasks: [
        "Create an API for managing tasks, with filtering and pagination",
        "Validate a form and return meaningful errors and success messages",
        "Create a migration and model for a one-to-many relationship",
        "Write a feature that uploads files and logs the filename in DB",
        "Create a reusable helper or service class (e.g., a logger or formatter)",
        "Set up a simple crontab task for backing up logs or DB",
    ],
    quizzes: [
        "What is the difference between merge and rebase in Git?",
        "Why would you eager-load a relationship in Laravel?",
        "What is the purpose of middleware in web frameworks?",
        "Give an example of violating DRY in a Laravel controller.",
    ],
    timeEstimate: { fullTime: "4-5 months", partTime: "6-7 months" },
  },
    {
    level: 4,
    title: "Mid-Level I",
    experience: "5-7 months",
    goal: "Build, test, and ship medium-complexity backend features independently. Begin using architectural thinking, asynchronous workflows, performance optimization, and contribute to the maintainability of codebases.",
    hardSkills: [
        "Backend Concepts (All Technologies) - RESTful standards: Idempotent methods, route design best practices",
        "Backend Concepts (All Technologies) - Modularization: Creating services, reusable components",
        "Backend Concepts (All Technologies) - Request lifecycle (full stack): Trace flow from HTTP to DB and back",
        "Backend Concepts (All Technologies) - Caching: When to use it, types (DB, memory, file)",
        "Backend Concepts (All Technologies) - Rate limiting: Conceptual intro + Laravel middleware",
        "Backend Concepts (All Technologies) - Queueing: Background tasks using queues/workers",
        "Database & Messaging - Relational DBs: PostgreSQL, MySQL: schema evolution, constraints, transactions",
        "Database & Messaging - Search DBs: Elasticsearch: Complex aggregations, Search after, more_like_this, msearch",
        "Database & Messaging - Indexing strategies: B-Tree, Hash indexes, covering indexes, when/how to use",
        "Database & Messaging - Query optimization: EXPLAIN basics, slow query detection, query builder best practices",
        "Database & Messaging - Table/row locking: Awareness, basic use cases, deadlocks",
        "Database & Messaging - Redis (usage): simple pub/sub, data persistence",
        "Database & Messaging - Messaging systems: RabbitMQ (basics): queues, producers, consumers",
        "PHP / Laravel (Advanced Usage) - Queues: Setup with database or redis driver, jobs, dispatch()",
        "PHP / Laravel (Advanced Usage) - Events & Listeners: Define, bind, dispatch, and handle asynchronously",
        "PHP / Laravel (Advanced Usage) - Gates & Policies: Role-based and custom authorization",
        "PHP / Laravel (Advanced Usage) - Service Providers: Registering bindings and bootstrapping packages",
        "PHP / Laravel (Advanced Usage) - Eloquent performance: Large dataset handling, chunking, cursor-based pagination",
        "PHP / Laravel (Advanced Usage) - Caching: Cache::put(), remember(), tags",
        "PHP / Laravel (Advanced Usage) - Filesystem: Working with Storage, visibility, remote disks",
        "PHP / Laravel (Advanced Usage) - API resources: Customizing output structure for API responses",
        "PHP / Laravel (Advanced Usage) - Advanced Eloquent: Scopes, Accessors, Mutators, casting, relationships",
        "PHP / Laravel (Advanced Usage) - Testing: Unit and Feature tests using php artisan test",
        "PHP / Laravel (Advanced Usage) - lifecycle: Laravel IOC container",
        "PHP / Laravel (Advanced Usage) - Popular packages: Sanctum, Passport and Horizon",
        "Python (Entry Level) - Syntax & structures: Functions, loops, dicts, lists",
        "Python (Entry Level) - Virtualenv & pip: Environment management and dependency installation",
        "Python (Entry Level) - OOP: Understand OOP basics in python",
        "Python (Entry Level) - Flask intro: Route, request/response, returning JSON",
        "Python (Entry Level) - FastAPI intro: Pydantic models, path parameters, automatic docs",
        "Python (Entry Level) - Celery basics: Tasks, async processing (for queue comparison with Laravel)",
        "Python (Entry Level) - Pandas & NumPy: Basic usage (read data, analyze small dataset)",
        "System Design & Architecture - Clean Code Principles: SRP, DRY, KISS, naming, code comments",
        "System Design & Architecture - Layered architecture: Controllers → Services → Repos",
        "System Design & Architecture - Dependency injection: Laravel + Python examples",
        "System Design & Architecture - Modular design: Separating features/domains (packages, providers)",
        "System Design & Architecture - Rate limiting & throttling: Laravel + API best practices",
        "DevOps & Environment - Docker: Create Dockerfile, use docker-compose with Laravel or Flask",
        "DevOps & Environment - CI (basic): GitHub Actions or GitLab CI: run tests, lint, format",
        "DevOps & Environment - Environment configs: Awareness of different environments (testing, production, staging and etc)",
        "DevOps & Environment - Artisan & management commands: Automate cleanup, seeding, scheduling",
        "Internet / HTTPS / Proxy - HTTPS & SSL: What is TLS, why HTTPS matters",
        "Internet / HTTPS / Proxy - SSL termination: Basics of certificate setup (Let's Encrypt, self-signed)",
        "Internet / HTTPS / Proxy - NGINX as reverse proxy: Basic NGINX config: routing, proxy_pass",
        "Internet / HTTPS / Proxy - Static vs dynamic content: Separation and caching in reverse proxies",
        "Git & Team Collaboration - Review Pull Requests: Read, comment, suggest, approve with feedback",
        "Git & Team Collaboration - Rebase strategy: Safe rebasing, squashing, merge commit policy",
        "Git & Team Collaboration - Commit hygiene: Breaking down commits, writing clear messages",
        "Git & Team Collaboration - Branch naming & conventions: Feature/task-based naming",
        "Data Structures & Algorithms - Trees: Traversal, hierarchical data, recursion",
        "Data Structures & Algorithms - Graphs: Connectivity, cycles, BFS/DFS, modeling real-world",
        "Data Structures & Algorithms - Caching algos: LRU, TTL, cache invalidation patterns",
        "Data Structures & Algorithms - Algorithmic design: Recursion, divide-and-conquer, DP (awareness)",
        "Data Structures & Algorithms - Complexity analysis: Space/time tradeoffs, scalability",
        "Data Structures & Algorithms - Problem-solving: Medium Leetcode/real system scenario challenges",
        "Service Communication - REST: Advanced design, versioning, hypermedia",
        "Service Communication - GraphQL: Implement simple endpoints, N+1 issue, query optimization",
        "Service Communication - WebSockets: Pub/sub, scaling, real-time events",
        "Frontend Collaboration & API Design - API usability: Design REST/GraphQL endpoints for frontend ease, versioning, and error handling",
        "Frontend Collaboration & API Design - BFF pattern (awareness): Understand and support Backend for Frontend solutions",
        "Frontend Collaboration & API Design - CORS & auth flows: Implement secure cross-origin resource sharing and token-based auth",
        "Frontend Collaboration & API Design - Performance: Coordinate caching, pagination, and data shaping for frontend consumption",
        "Frontend Collaboration & API Design - API documentation: OpenAPI/Swagger, clear response contracts",
        "Frontend Collaboration & API Design - Cross-team review: Participate in API reviews with frontend developers",
    ],
    softSkills: [
        "Cross-discipline learning: Switch between PHP and Python without fear",
        "Architectural awareness: Ask 'Is this scalable? reusable?'",
        "Collaboration: Give and receive meaningful PR feedback",
        "Prioritization: Balance clean code vs shipping on time",
        "Self-review: Regularly test and review own work before PR",
    ],
    responsibilities: [
        "Delivers medium features, understands core systems, collaborates actively.",
    ],
    roadmap: {
      months: [
        "Month 1: Learn Laravel Queues, Events, Jobs",
        "Month 1: Get started with Python: syntax, Flask, virtualenv",
        "Month 1: Read/write custom Laravel service classes and service providers",
        "Month 1: Write unit tests using phpunit",
        "Month 2: Start using Docker for local Laravel and Flask projects",
        "Month 2: Learn Pandas basics (e.g., analyze CSV data)",
        "Month 2: Use Laravel gates/policies for access control",
        "Month 2: Work with Laravel caching and database indexing",
        "Month 3: Write an NGINX config to proxy Laravel/FastAPI behind HTTPS",
        "Month 3: Build & test a modular Laravel service (separated features/domains)",
        "Month 3: Set up a basic GitHub Actions CI pipeline (lint + test)",
        "Month 4 (stretch): Explore Celery with FastAPI",
        "Month 4 (stretch): Add simple FastAPI Pydantic validation and documentation",
        "Month 4 (stretch): Use Laravel event listeners for notifications/emails",
        "Month 4 (stretch): Add caching with expiration and invalidation",
      ],
      goals: []
    },
    practicalTasks: [
        "Create a new module for managing tasks with Eloquent, policies, and events",
        "Build a queue-based image processor with Laravel Jobs",
        "Write and test a basic Flask or FastAPI service",
        "Build a Dockerized Laravel app with .env handling",
        "Set up NGINX to route to Laravel API and serve a static frontend",
        "Write a Feature Test covering a business flow (e.g., register + login + create task)",
    ],
    quizzes: [
        "What are the pros and cons of using queues?",
        "What does bind() do in a Laravel Service Provider?",
        "What is the difference between Celery and Laravel queues?",
        "How does FastAPI validate incoming requests?",
        "What does docker-compose up --build do?",
    ],
    timeEstimate: { fullTime: "5-6 months", partTime: "7-9 months" },
  },
  {
    level: 5,
    title: "Mid-Level II",
    experience: "5-7 months",
    goal: "Own complex features and subsystems end-to-end. Has a good idea about architecture and scalability in projects. Start mentoring other developers in a team. Experience in contributing to highly scalable projects.",
    hardSkills: [
      "Backend Concepts (All Technologies) - API versioning: Strategies for backward compatibility, deprecation policies",
      "Backend Concepts (All Technologies) - Advanced modularization: Plugin/Domain-based design, reusable packages",
      "Backend Concepts (All Technologies) - Event-driven architecture: Building with events, decoupling, async flows",
      "Database & Messaging - Advanced SQL: Window functions, CTEs, complex joins, transactions",
      "Database & Messaging - NoSQL: MongoDB: indexes, aggregation, replication basics",
      "Database & Messaging - Elasticsearch: Mapping, indexing, querying, aggregations (nested aggs)",
      "Database & Messaging - Indexing strategies: Composite, partial, full-text, covering indexes, index maintenance",
      "Database & Messaging - Consistency models: Strong/eventual consistency, CAP theorem (intro)",
      "Database & Messaging - Redis (advanced): Data structures (sets, sorted sets), pub/sub, expiry",
      "Database & Messaging - Messaging: RabbitMQ: exchanges, routing",
      "PHP / Laravel (Advanced Mastery) - Advanced Queues: Chained jobs, job batching, queue monitoring",
      "PHP / Laravel (Advanced Mastery) - Broadcasting & WebSockets: Real-time events with Laravel Echo, Pusher, or Socket.IO",
      "PHP / Laravel (Advanced Mastery) - Observer pattern: Model observers for audit, notifications",
      "PHP / Laravel (Advanced Mastery) - Modular app structure: Domains, packages, service boundaries",
      "PHP / Laravel (Advanced Mastery) - Advanced migrations: Zero-downtime deploys, data migration scripts",
      "PHP / Laravel (Advanced Mastery) - Performance optimization: Query caching, Redis, config cache",
      "Python (Advanced Usage) - Async programming: asyncio, async Flask/FastAPI endpoints, background tasks",
      "Python (Advanced Usage) - Dependency injection: FastAPI's Depends, custom DI frameworks",
      "Python (Advanced Usage) - API docs and versioning: OpenAPI/Swagger, documenting Python APIs",
      "Python (Advanced Usage) - Pytest best practices: Fixtures, parameterization, test coverage",
      "System Design & Architecture - Distributed systems: Microservices, service discovery, message brokers",
      "System Design & Architecture - Advanced caching: Redis, Memcached, cache invalidation patterns",
      "System Design & Architecture - API gateways & BFF: Pattern overview, implementation choices",
      "DevOps & Environment - Advanced Docker/K8s: Multi-service Docker Compose, basic Kubernetes (deploy, services, secrets)",
      "DevOps & Environment - CI/CD pipelines: Automated build/test/deploy, artifact versioning",
      "Security & Compliance - OAuth2 & JWT: Secure API authentication, token handling",
      "Security & Compliance - Secure coding review: Threat modeling, peer review for security",
      "Git & Team Collaboration - Code review leadership: Mentor others, enforce review standards, knowledge sharing",
      "Git & Team Collaboration - Release management: Release notes, tagging, rollback plans",
      "Data Structures & Algorithms - Algorithmic tradeoffs: Latency, throughput, memory, scalability",
      "Data Structures & Algorithms - Data flow: Batch vs stream, parallel/async patterns",
      "Data Structures & Algorithms - System design interviews: Design a scalable cache, rate limiter",
      "Service Communication - REST: API gateway, orchestration, HATEOAS",
      "Service Communication - GraphQL: Federation, schema stitching, security",
      "Service Communication - gRPC: Awareness, proto files, why/when used",
      "Service Communication - WebSockets: Real-time, distributed pub/sub, scaling",
      "Frontend Collaboration & API Design - API usability: Design REST/GraphQL endpoints for frontend ease, versioning, error handling",
      "Frontend Collaboration & API Design - BFF pattern: Understand and support Backend for Frontend solutions",
      "Frontend Collaboration & API Design - Performance: Coordinate caching, pagination, and data shaping for frontend consumption",
      "Frontend Collaboration & API Design - API documentation: OpenAPI/Swagger, clear response contracts",
      "Frontend Collaboration & API Design - Cross-team review: Participate in API reviews with frontend developers",
    ],
    softSkills: [
      "Systemic thinking: See the 'big picture,' anticipate technical debt, risks",
      "Communication: Clearly explain tradeoffs, decisions, and roadmap",
      "Ownership: Responsible for releases",
    ],
    responsibilities: [
      "Owns some important features",
    ],
    roadmap: {
      months: [
        "Month 1: Advanced Laravel: queues, events, policies, observers",
        "Month 1: Start modularizing app code, build custom packages",
        "Month 2: Intro to microservices",
        "Month 2: Docker Compose: multi-service local setup",
        "Month 2: Implement and monitor caching at different levels (app, DB, HTTP)",
        "Month 3: Add API versioning, gateway (or BFF) layer",
        "Month 4 (Stretch): Mentor a junior developer through a feature cycle",
      ],
      goals: [],
    },
    practicalTasks: [
      "Create a custom Laravel package for a reusable domain (e.g., notifications)",
      "Set up and monitor a Redis-backed cache for a performance-critical API",
      "Write a feature test suite covering edge cases, concurrency, and rollback",
    ],
    quizzes: [
      "How do you secure API-to-API communication?",
      "What are the tradeoffs of microservices vs monolith?",
    ],
    timeEstimate: { fullTime: "4-6 months", partTime: "7-9 months" },
  },
  {
    level: 6,
    title: "Senior I",
    experience: "8-12 months",
    goal: "Own the entire code base. Lead by example in code quality, architecture, and team collaboration. Drive improvements in performance, scalability, reliability, and mentor others.",
    hardSkills: [
      "Backend Concepts (All Technologies) - Scalability patterns: Horizontal vs vertical scaling, bottleneck analysis, cache layers",
      "Backend Concepts (All Technologies) - Performance profiling: Tools and methodologies for code and DB profiling, load testing",
      "Backend Concepts (All Technologies) - Security best practices: OWASP Top 10, secure API design, input validation, audit logging",
      "Database & Messaging - NoSQL: MongoDB: replication basics",
      "Database & Messaging - Elasticsearch: Lucene query syntax, Kibana Dashboard",
      "Database & Messaging - Replication: Master-slave, failover, monitoring",
      "Database & Messaging - Consistency models: Strong/eventual consistency, CAP theorem (mastery)",
      "Database & Messaging - Sharding: Horizontal partitioning, use cases",
      "Database & Messaging - Messaging: Kafka (awareness): pub/sub, partitions",
      "PHP / Laravel (Advanced Mastery) - Custom packages: Building and maintaining reusable Laravel packages",
      "PHP / Laravel (Advanced Mastery) - Advanced Service Providers: Dynamic binding, deferred providers, package auto-discovery",
      "PHP / Laravel (Advanced Mastery) - Policy/Permission systems: Multi-layered auth, ACL, team/org roles",
      "PHP / Laravel (Advanced Mastery) - Testing at scale: Mocking, data providers, coverage metrics, parallel testing",
      "PHP / Laravel (Advanced Mastery) - Advanced migrations: Zero-downtime deploys, data migration scripts",
      "Python (Advanced Usage) - Advanced Celery: Chords, groups, canvas, monitoring",
      "Python (Advanced Usage) - Packaging & distribution: Build and publish internal or open-source packages",
      "Python (Advanced Usage) - Data engineering basics: ETL, streaming, data validation",
      "Python (Advanced Usage) - Advanced Pandas/Numpy: Complex transformations, performance tips",
      "System Design & Architecture - Distributed systems: Microservices, service discovery, message brokers",
      "System Design & Architecture - DDD (Domain Driven Design): Strategic modeling, bounded contexts, aggregates",
      "System Design & Architecture - CQRS/Event sourcing: Patterns for command/query separation, audit, and rollback",
      "DevOps & Environment - Cloud deployment: Deploy to AWS/GCP/Azure, use managed DB, S3, compute",
      "DevOps & Environment - Secrets management: Vault, environment separation, secure config",
      "DevOps & Environment - Monitoring & alerting: Prometheus, Grafana, Sentry, log aggregation",
      "DevOps & Environment - Blue/green/canary deploys: Release strategies for zero-downtime, rollback",
      "Security & Compliance - Data protection: GDPR basics, PII handling, encryption-at-rest",
      "Security & Compliance - Audit logging: Track changes, monitor access, compliance",
      "Git & Team Collaboration - Repo hygiene: Monorepo vs polyrepo, submodules, dependency management",
      "Git & Team Collaboration - Conflict resolution: Handle complex merges, mediate team disputes",
      "Data Structures & Algorithms - Advanced trees/graphs: Trie, DAGs, topological sort, shortest path",
      "Data Structures & Algorithms - Distributed data structures: Caches, bloom filters, sharding",
      "Service Communication - REST: Orchestration, HATEOAS",
      "Service Communication - GraphQL: Federation, schema stitching, security",
      "Service Communication - gRPC: Production use, streaming, auth, retries",
      "Service Communication - WebSockets: Real-time, distributed pub/sub, scaling",
    ],
    softSkills: [
      "Technical leadership: Mentor, unblock, and support others; lead by example",
      "Initiative: Propose improvements, drive change, own architectural docs",
      "Ownership: Responsible for postmortems, and project health",
    ],
    responsibilities: [
      "Owns key features, mentors juniors, ensures code quality and best practices.",
    ],
    roadmap: {
      months: [
        "Month 1: Async Python: FastAPI async endpoints, advanced Celery",
        "Month 2: Intro to event-driven communication",
        "Month 3: Deploy microservices to the cloud, set up CI/CD and secrets management",
        "Month 3: Security reviews, audit logging, handle PII",
        "Month 4 (Stretch): Experiment with CQRS, event sourcing on a demo project",
        "Month 4 (Stretch): Implement blue/green deployment for zero-downtime updates",
      ],
      goals: [],
    },
    practicalTasks: [
      "Design and implement a modular, event-driven feature spanning multiple services (e.g., order processing with Laravel and FastAPI, using queues/events)",
      "Build and deploy a Dockerized microservice to a cloud environment (AWS/GCP/Azure), with CI/CD pipeline",
    ],
    quizzes: [
      "What's the difference between horizontal and vertical scaling?",
      "How does event sourcing differ from traditional CRUD?",
      "How do you secure API-to-API communication?",
      "How do you handle GDPR requirements in an API?",
      "What is a blue/green deployment? Steps and risks?",
    ],
    timeEstimate: { fullTime: "6-8 months", partTime: "9-12 months" },
  },
  {
    level: 7,
    title: "Senior II Backend Developer",
    experience: "12-18 months",
    goal: "Architect, scale, and secure large, distributed backend systems. Drive major technical initiatives, set standards, and mentor peers and juniors. Act as a trusted technical advisor and owner of critical subsystems.",
    hardSkills: [
      "Backend Concepts (All Technologies) - Systems integration: Design and implement integrations with external APIs, legacy systems, or third-party tools",
      "Backend Concepts (All Technologies) - API gateway management: Implement and optimize API gateways, BFF, rate limiting, and authentication",
      "Backend Concepts (All Technologies) - Advanced event-driven design: Sagas, outbox/inbox patterns, distributed event processing",
      "Backend Concepts (All Technologies) - Data consistency patterns: Eventual consistency, distributed transactions, idempotency, compensation",
      "Backend Concepts (All Technologies) - Advanced performance tuning: Profiling, caching strategies, HTTP/2, gRPC, connection pooling, async flows",
      "Backend Concepts (All Technologies) - Reliability engineering: Circuit breakers, retries, bulkheads, graceful degradation",
      "Database & Messaging - Multi-master arch.: Multi-master replication, pros/cons, conflict resolution",
      "Database & Messaging - Sharding strategies: Range vs hash, dynamic re-sharding, cross-shard queries",
      "Database & Messaging - Consistency & CAP: Deep dive, tradeoffs, partition tolerance",
      "Database & Messaging - Locking/concurrency: Table/row locking, optimistic/pessimistic, deadlock handling",
      "Database & Messaging - DB scaling: Read replicas, write scaling, connection pooling",
      "Database & Messaging - Elasticsearch: Cluster setup, replication, tuning, backup/restore",
      "Database & Messaging - Redis: Cluster, persistence, eviction, Lua scripts",
      "Database & Messaging - Messaging: Kafka: partitions, consumer groups, offset management, durability",
      "Database & Messaging - Event sourcing: Storing events, replay, audit, eventual consistency",
      "PHP / Laravel (Expert Level) - Multi-module/package apps: Architecting and maintaining large modular Laravel codebases",
      "PHP / Laravel (Expert Level) - Laravel Octane & Swoole: High-performance PHP with async/task workers, real-time APIs",
      "PHP / Laravel (Expert Level) - Deep Service Container: Advanced bindings, contextual injection, resolving circular dependencies",
      "PHP / Laravel (Expert Level) - Package publishing & maintenance: Open-source and internal package lifecycle management",
      "PHP / Laravel (Expert Level) - Laravel + external services: Integrating with external APIs, SSO, payment gateways, etc.",
      "PHP / Laravel (Expert Level) - Custom CLI & automation: Advanced artisan commands, cron orchestration",
      "Python (Expert Level) - Async systems at scale: Async HTTP clients, websockets, event loops, worker pools",
      "Python (Expert Level) - Microservices in Python: Service templates, inter-service comms, testing strategies",
      "Python (Expert Level) - FastAPI advanced usage: Dependency injection, background tasks, custom middleware, OpenAPI extensions",
      "Python (Expert Level) - Celery at scale: Routing, task prioritization, distributed queues, monitoring, error handling",
      "Python (Expert Level) - Data pipeline architecture: Batch and streaming ETL, large file handling, parallel data processing",
      "Python (Expert Level) - Open-source contribution: Contribute to and maintain third-party Python libraries",
      "System Design & Architecture - Distributed tracing: Correlate logs/metrics across services (Jaeger, Zipkin)",
      "System Design & Architecture - High availability: Clustering, failover, replication, disaster recovery strategies",
      "System Design & Architecture - Advanced DDD: Context mapping, anti-corruption layers, event storming",
      "System Design & Architecture - Multi-tenant systems: Architect for SaaS, sharding, data isolation",
      "System Design & Architecture - Advanced CQRS/Event sourcing: Scalability, history replay, audit, eventual consistency",
      "DevOps & Environment - Kubernetes: Helm charts, rolling updates, pod autoscaling, custom controllers",
      "DevOps & Environment - Advanced CI/CD: Multi-env pipelines, canary deploys, feature toggles, secure secrets",
      "DevOps & Environment - Cloud-native patterns: Service meshes (Istio/Linkerd), config maps, secret stores",
      "DevOps & Environment - Infrastructure as Code: Terraform, Pulumi, CloudFormation basics",
      "DevOps & Environment - Monitoring & SLOs: Service Level Objectives, alerting, distributed log/trace aggregation",
      "Security & Compliance - Advanced auth systems: SSO (OAuth2, SAML), multi-factor, delegated permissions",
      "Security & Compliance - Secure data flows: End-to-end encryption, secure key management, token rotation",
      "Security & Compliance - Regulatory compliance: PCI, HIPAA, GDPR deep dives, audit trails, privacy by design",
      "Security & Compliance - Incident response: Security incident playbooks, forensics, communication plans",
      "Git & Team Collaboration - Monorepo management: Strategies for large-scale repos, submodules, code sharing",
      "Git & Team Collaboration - Release train/automation: Scheduled releases, rollbacks, changelogs, semantic versioning",
      "Git & Team Collaboration - Conflict mediation: Facilitate resolution on technical disagreements, build consensus",
      "Git & Team Collaboration - Technical documentation: Maintain and evolve high-level architectural docs, decision records",
      "Data Structures & Algorithms - Distributed systems algorithms: Consensus (Raft, Paxos), leader election, CRDTs",
      "Data Structures & Algorithms - Data partitioning/sharding: Consistent hashing, partition tolerance",
      "Data Structures & Algorithms - Algorithmic risk assessment: Impact on reliability, security, cost",
      "Data Structures & Algorithms - Custom data structures: For domain-specific optimization",
      "Data Structures & Algorithms - Systemic DSA knowledge: DSA impact on architecture and business outcomes",
      "Service Communication - REST: Org-wide standards, global versioning, deprecation",
      "Service Communication - GraphQL: Cross-team schemas, federation, governance",
      "Service Communication - gRPC: Multi-language contracts, backward/forward compatibility",
      "Service Communication - WebSockets: Real-time analytics, multi-region delivery",
      "Service Communication - API evolution: Strategy for long-term compatibility",
    ],
    softSkills: [
      "Technical influence: Champion best practices, drive adoption across teams",
      "Strategic thinking: Align tech with business, anticipate future needs",
      "Conflict resolution: Mediate technical and team disputes, foster healthy debate",
      "Mentorship: Coach peers, nurture juniors, lead by example",
      "Communication: Present complex ideas clearly to technical and non-technical audiences",
    ],
    responsibilities: [
      "Leads projects, architects solutions, drives technical excellence.",
    ],
    roadmap: {
      months: [
        "Month 1: Design event-driven, distributed architectures (theory + lab)",
        "Month 1: Deep dive into Kubernetes, Helm, and cloud-native deployments",
        "Month 1: Advanced Laravel/Python modularization and DI",
        "Month 2: Implement distributed tracing and monitoring in a live system",
        "Month 2: Multi-tenant architecture: sharding, data isolation, SaaS readiness",
        "Month 2: Open-source contribution (publish/maintain a package)",
        "Month 3: Advanced security: SSO, key management, regulatory reviews",
        "Month 3: Incident response simulation, postmortem best practices",
        "Month 3: Data pipelines: batch, stream, parallelism",
        "Month 4 (stretch): Lead a migration from monolith to microservices",
        "Month 4 (stretch): Build and tune CI/CD for multi-team, multi-service repos",
        "Month 4 (stretch): Mentor teams, establish tech standards, evolve architecture docs",
      ],
      goals: [],
    },
    practicalTasks: [
      "Architect and implement a multi-service system with distributed tracing, advanced event-driven flows, and failover.",
      "Migrate a monolith to microservices, including DB refactoring, API gateway, and auth.",
      "Build a SaaS-ready, multi-tenant Laravel or FastAPI app with tenant isolation and dynamic configuration.",
      "Design and deploy a Kubernetes-based deployment pipeline with auto-scaling, canary releases, and SLO monitoring.",
      "Lead a security incident response tabletop and produce a postmortem report.",
    ],
    quizzes: [
      "How do you ensure eventual consistency across microservices?",
      "What are the tradeoffs of Kubernetes vs Docker Compose for production?",
      "How does distributed tracing work and why is it critical?",
      "Explain the difference between SAML and OAuth2.",
      "What is PCI compliance and how do you design for it?",
    ],
    timeEstimate: { fullTime: "8-10 months", partTime: "12-15 months" },
  },
  {
    level: 8,
    title: "Lead/Principal Backend Developer",
    experience: "18-24 months",
    goal: "Set technical direction for multiple teams or critical systems. Architect complex, scalable, and secure solutions. Champion best practices, documentation, and team growth. Influence organizational standards and mentor senior engineers.",
    hardSkills: [
      "Backend Concepts & Architecture - Multi-service orchestration: Design and manage complex service meshes, API gateways, and shared schemas",
      "Backend Concepts & Architecture - Architecture patterns: Event sourcing, CQRS, DDD, micro-frontends, backend-for-frontend",
      "Backend Concepts & Architecture - System observability: Full-spectrum tracing, structured logging, application health dashboards",
      "Backend Concepts & Architecture - Legacy modernization: Strategies for decomposing monoliths, phased migration plans",
      "Backend Concepts & Architecture - Capacity planning: Forecasting, load testing, auto-scaling strategies",
      "Database & Messaging - Polyglot persistence: When and how to combine multiple DB types in a system",
      "Database & Messaging - DB architecture: Evaluating DBs for workload, cost, and scaling",
      "Database & Messaging - Global replication: Multi-region, cross-DC, latency strategies, DR planning",
      "Database & Messaging - Consensus protocols: Paxos, Raft (awareness), impact on DB and messaging reliability",
      "Database & Messaging - DB migrations: Zero-downtime migration, schema evolution tooling",
      "Database & Messaging - Elasticsearch: Scaling, cross-cluster search, custom analyzers",
      "Database & Messaging - Redis: Multi-master, cluster failover, geo-replication",
      "Database & Messaging - Kafka/RabbitMQ: High-throughput, guaranteed delivery, ordering, dead-letter queues",
      "Database & Messaging - Auditing & Security: Encryption at rest, audit logging, compliance for data",
      "Database & Messaging - Data reliability: Backup, restore, PITR, corruption handling",
      "PHP / Laravel (Expert/Architect Level) - Laravel as a platform: Architecting Laravel for SaaS, multi-tenant, or plugin-based platforms",
      "PHP / Laravel (Expert/Architect Level) - Custom scaffolding: Build reusable blueprints, CLI tools, and templates",
      "PHP / Laravel (Expert/Architect Level) - Advanced package design: Maintain internal/external packages, semantic versioning, deprecation",
      "PHP / Laravel (Expert/Architect Level) - Laravel internals: Contribute to the framework, propose RFCs, extend core",
      "PHP / Laravel (Expert/Architect Level) - Cross-language integration: Bridge Laravel with Python/Go/Node for polyglot architectures",
      "Python (Expert/Architect Level) - Async microservices: Architect, document, and monitor async Python services (FastAPI, Celery)",
      "Python (Expert/Architect Level) - Data engineering at scale: Data lakes, batch/stream processing, advanced ETL",
      "Python (Expert/Architect Level) - Polyglot integration: gRPC/REST comms, shared schemas, cross-service contracts",
      "Python (Expert/Architect Level) - Open-source leadership: Maintain/contribute to key Python projects, lead standards",
      "Advanced Software Engineering - Design documentation: Create/maintain ADRs, architecture diagrams, sequence diagrams",
      "Advanced Software Engineering - Documentation best practices: Living docs, onboarding guides, code comments, API docs, knowledge base",
      "Advanced Software Engineering - Tech debt management: Systematic tracking, prioritization, and remediation",
      "Advanced Software Engineering - Advanced code quality: Static analysis, code metrics, test coverage as a culture",
      "Advanced Software Engineering - Systemic risk assessment: Identify, communicate, and mitigate systemic technical risks",
      "DevOps, Platform, & Reliability - Kubernetes at scale: Multi-cluster, HA, network policies, secret rotation",
      "DevOps, Platform, & Reliability - Platform automation: GitOps, infrastructure as code, self-service tooling for dev teams",
      "DevOps, Platform, & Reliability - SRE practices: SLOs/SLIs, error budgets, chaos engineering, blameless postmortems",
      "DevOps, Platform, & Reliability - Security by design: Secure defaults, threat modeling, incident playbooks",
      "DevOps, Platform, & Reliability - Multi-cloud/hybrid: Architect and deploy across providers, avoid vendor lock-in",
      "Leadership, Influence & Collaboration - Technical vision: Set and articulate technical direction for teams and projects",
      "Leadership, Influence & Collaboration - Mentorship & coaching: Grow senior engineers, delegate, foster a learning culture",
      "Leadership, Influence & Collaboration - Cross-team influence: Drive adoption of standards, resolve conflicts, align teams",
      "Leadership, Influence & Collaboration - Stakeholder communication: Bridge between engineering, product, and business",
      "Leadership, Influence & Collaboration - Org-wide documentation: Champion, review, and enforce documentation standards",
      "Leadership, Influence & Collaboration - Diversity & inclusion: Foster an inclusive, collaborative engineering environment",
      "Full-Stack Architecture & Frontend Collaboration - API-first design: Drive API-first development, contract testing, and rapid iteration",
      "Full-Stack Architecture & Frontend Collaboration - BFF & orchestration: Architect/oversee Backend for Frontend and API composition patterns",
      "Full-Stack Architecture & Frontend Collaboration - Micro-frontends (awareness): Understand implications for API design and service boundaries",
      "Full-Stack Architecture & Frontend Collaboration - SSR & performance: Support server-side rendering, optimize backend for frontend load times",
      "Full-Stack Architecture & Frontend Collaboration - API governance: Set org-wide standards for API consistency, deprecation, and documentation",
      "Full-Stack Architecture & Frontend Collaboration - Developer experience: Ensure seamless integration and onboarding for frontend teams",
      "Full-Stack Architecture & Frontend Collaboration - Accessibility & UX (awareness): Recognize backend's role in supporting accessibility and user experience",
    ],
    softSkills: [
      "Vision & alignment: Inspire, align teams and stakeholders on technical direction",
      "Executive communication: Present to leadership, justify investments, report on impact",
      "Delegation: Empower others, avoid bottlenecks, develop new leaders",
      "Resilience: Manage setbacks, foster psychological safety, embrace learning from failure",
      "Advocacy: Champion best practices, documentation, and inclusive processes",
    ],
    responsibilities: [
      "Sets technical direction, mentors seniors, influences org-wide architecture.",
    ],
    roadmap: {
      months: [
        "Month 1: Set technical vision, define target architecture, create initial ADRs and diagrams",
        "Month 1: Audit and improve documentation, establish doc standards and review cycles",
        "Month 2: Lead a cross-team migration or greenfield project; delegate, coach, and document decisions",
        "Month 2: Implement advanced observability, SLOs, and GitOps workflows",
        "Month 3: Execute platform automation and IaC initiatives",
        "Month 3: Drive technical debt cleanup and risk mitigation with systemic tracking",
        "Month 4 (stretch): Contribute to open-source or internal frameworks",
        "Month 4 (stretch): Mentor and onboard new leads; drive culture of inclusion and documentation",
      ],
      goals: [],
    },
    practicalTasks: [
      "Design and document a scalable, multi-tenant platform with polyglot microservices, using ADRs and architecture diagrams",
      "Lead a legacy migration: Plan and execute the decomposition of a monolith to services, including risk/tech debt assessment",
      "Establish and enforce documentation and code quality standards across multiple teams",
      "Implement GitOps workflows for seamless deployment and rollback",
      "Mentor a senior engineer through a complex project, focusing on delegation and growth",
    ],
    quizzes: [
      "What are the tradeoffs of multi-cloud vs single cloud?",
      "How do you ensure documentation remains up-to-date and useful?",
      "Explain chaos engineering and its value.",
      "How do you design for observability in microservices?",
      "What is an ADR? Why is it important?",
    ],
    timeEstimate: { fullTime: "12-18 months", partTime: "18-24 months" },
  },
  {
    level: 9,
    title: "Manager / Director of Backend Engineering",
    experience: "18-30 months",
    goal: "Drive the technical vision, delivery, and operational excellence of multiple backend teams or product lines. Lead engineering managers and principal engineers. Ensure technical strategy aligns with business goals. Foster a culture of excellence, innovation, and documentation.",
    hardSkills: [
      "Backend Concepts & Architecture - Technical strategy: Define and communicate backend vision and long-term roadmap",
      "Backend Concepts & Architecture - Architecture governance: Approve architecture reviews, enforce standards across teams",
      "Backend Concepts & Architecture - Portfolio management: Assess, prioritize, and sunset systems as needed",
      "Backend Concepts & Architecture - Org-wide scalability: Architect for 10x growth, drive large migrations, platformization",
      "Backend Concepts & Architecture - Incident management: Oversee high-severity incidents, RCA, drive org-wide learning",
      "Data Structures & Algorithms - DSA for architecture: Guide teams on DSA choices for scalability, reliability, cost",
      "Data Structures & Algorithms - Distributed algorithms: Consensus, leader election, partitioning, CRDTs (as decision-maker)",
      "Data Structures & Algorithms - Algorithm tradeoff analysis: Evaluate DSA choices for new systems/platforms",
      "Data Structures & Algorithms - DSA education: Sponsor and foster DSA training and code interviews org-wide",
      "Service Communication - Multi-protocol architecture: Set standards for REST, gRPC, GraphQL, WebSockets org-wide",
      "Service Communication - Interoperability: Drive strategy for cross-language, cross-team comms",
      "Service Communication - API governance: Establish API lifecycle, evolution, and deprecation policies",
      "Service Communication - Security/compliance in APIs: Org-wide SSO, scopes, rate limiting, audit, API security reviews",
      "Database & Messaging - Polyglot persistence at scale: Lead DB technology selection and standardization",
      "Database & Messaging - Global data strategies: Multi-region replication, compliance, DR, latency management",
      "Database & Messaging - Data lifecycle: Retention, archival, compliance, audit for all systems",
      "Database & Messaging - Messaging platform strategy: Kafka/RabbitMQ/Redis evaluation, global event bus management",
      "Database & Messaging - Org-wide migrations: Plan and oversee multi-system migrations, ensure data integrity",
      "PHP / Laravel & Python (Oversight Level) - Framework direction: Decide on upgrades, new tech adoption, sunsetting legacy frameworks",
      "PHP / Laravel & Python (Oversight Level) - Secure SDLC: Ensure all teams follow secure coding, reviews, and dependency management",
      "PHP / Laravel & Python (Oversight Level) - Standards & best practices: Enforce code quality, testing, and documentation standards org-wide",
      "PHP / Laravel & Python (Oversight Level) - Tech branding: Encourage open-source contributions, represent company in tech community",
      "Advanced Software Engineering - Tech debt lifecycle: Org-level tracking, budgeting, and systematic paydown",
      "Advanced Software Engineering - Architecture documentation: Ensure living docs, ADRs, onboarding, and compliance artifacts",
      "Advanced Software Engineering - Quality at scale: Foster org-wide testing, code review, and release excellence",
      "Advanced Software Engineering - Systemic risk management: Identify, communicate, and mitigate cross-org technical risks",
      "DevOps, Platform, & Reliability - Platform vision: Platformization, self-service infrastructure, developer productivity",
      "DevOps, Platform, & Reliability - SRE program: Build and lead SRE/DevOps teams, drive SLOs/SLIs/adoption",
      "DevOps, Platform, & Reliability - Compliance & security: Org-wide incident response, audits, and regulatory programs",
      "DevOps, Platform, & Reliability - Vendor management: Evaluate/approve third-party DB, cloud, and messaging vendors",
      "Leadership, Influence & Collaboration - Team leadership: Build, mentor, and grow senior managers, leads, and ICs",
      "Leadership, Influence & Collaboration - Cross-functional alignment: Partner with Product, Security, Legal, and other orgs",
      "Leadership, Influence & Collaboration - Strategic communication: Present to executives, board, and external partners",
      "Leadership, Influence & Collaboration - Org design: Structure teams for scale, growth, and innovation",
      "Leadership, Influence & Collaboration - Culture: Foster documentation, inclusion, psychological safety, and learning",
      "Full-Stack Strategy & Frontend Integration - Cross-functional alignment: Align backend and frontend strategies, roadmaps, and delivery timelines",
      "Full-Stack Strategy & Frontend Integration - Org-wide API standards: Enforce and evolve API, documentation, and versioning policies",
      "Full-Stack Strategy & Frontend Integration - Full-stack architecture: Oversee distributed system boundaries, BFF, SSR, micro-frontends",
      "Full-Stack Strategy & Frontend Integration - API lifecycle management: Lead lifecycle, governance, and cross-team API deprecation processes",
      "Full-Stack Strategy & Frontend Integration - Frontend performance impact: Ensure backend supports optimal frontend performance and scalability",
      "Full-Stack Strategy & Frontend Integration - Stakeholder collaboration: Partner with product/design/frontend leaders for end-to-end delivery",
      "Full-Stack Strategy & Frontend Integration - Accessibility/UX advocacy: Champion backend support for accessibility and world-class user experience",
    ],
    softSkills: [
      "Executive presence: Inspire, influence, and align C-level and board stakeholders",
      "Empathy & inclusion: Build safe, diverse, and engaged teams",
      "Strategic vision: Lead org through ambiguity, growth, and pivots",
      "Delegation & trust: Scale through others, empower managers, avoid bottlenecks",
      "Change management: Drive org-wide change, manage resistance, communicate impact",
    ],
    responsibilities: [
      "Leads teams, sets technical strategy, drives delivery and culture.",
    ],
    roadmap: {
      months: [
        "Month 1-2: Set org-wide backend technical vision and standards",
        "Month 1-2: Launch documentation and quality initiatives",
        "Month 1-2: Audit and roadmap tech debt and platform investments",
        "Month 3-4: Oversee and support multi-team migrations or new platform launches",
        "Month 3-4: Drive SRE/DevOps practices, compliance, and incident management improvements",
        "Month 5-6 (stretch): Present technical strategy to executives/board",
        "Month 5-6 (stretch): Mentor new directors, managers, and principal engineers",
        "Month 5-6 (stretch): Foster open-source and tech community engagement",
      ],
      goals: [],
    },
    practicalTasks: [
      "Define and execute a technical strategy for a new product line or platform migration",
      "Oversee a multi-team architecture review: set standards, mediate tradeoffs, publish ADRs",
      "Lead a data migration: multi-region, multi-system, with compliance and audit",
      "Implement API governance: lifecycle, versioning, deprecation, org-wide standards",
      "Build a documentation and quality program: enforce doc, testing, and review culture",
    ],
    quizzes: [
      "How would you evaluate a new DB or messaging tech for org-wide adoption?",
      "How do you plan and execute a zero-downtime migration for a critical service?",
      "What is your approach to balancing innovation and tech debt?",
      "How do you foster documentation best practices at scale?",
      "How do you align cross-team architecture with business goals?",
    ],
    timeEstimate: { fullTime: "18-30 months", partTime: "24-36 months" },
  },
  {
    level: 10,
    title: "Executive / Head of Backend Engineering",
    experience: "24-36 months",
    goal: "Own the technical and organizational vision for backend engineering across the company. Shape platform strategy, technical investments, and culture for world-class backend and cross-functional product delivery. Serve as a key voice in executive leadership, market positioning, and technical due diligence.",
    hardSkills: [
      "Technical & Platform Strategy - Org-wide technical vision: Define and champion the long-term backend and full-stack architecture",
      "Technical & Platform Strategy - Platform evolution: Lead platformization, modularization, and developer productivity",
      "Technical & Platform Strategy - Technology investment: Evaluate and sponsor new tech, sunset legacy, allocate R&D budgets",
      "Technical & Platform Strategy - M&A & integration: Oversee tech due diligence, integration of acquired platforms",
      "Data Structures & Algorithms - Systemic DSA impact: Guide DSA choices for cost, scalability, and business differentiation",
      "Data Structures & Algorithms - Org-level education: Set DSA interview standards, sponsor org-wide training",
      "Data Structures & Algorithms - Algorithmic risk analysis: Evaluate platform and product risk based on algorithmic efficiency",
      "Service Communication - Multi-protocol governance: Org-wide standards for REST, gRPC, GraphQL, and WebSockets",
      "Service Communication - API productization: Guide public/internal API strategy and market positioning",
      "Service Communication - API lifecycle leadership: Oversee versioning, deprecation, and external partner impact",
      "Service Communication - Security, compliance, and audit: Drive API security, compliance, and audit strategies",
      "Database & Messaging - Technology strategy: Set direction for relational, NoSQL, search, and messaging platforms",
      "Database & Messaging - Global data governance: Oversee compliance, retention, DR, and multi-region strategies",
      "Database & Messaging - Vendor evaluation: Lead high-stakes negotiations, choose strategic DB/messaging vendors",
      "Database & Messaging - Data platform innovation: Sponsor new approaches (event sourcing, streaming, AI/analytics)",
      "Product & Platform Vision (Full-Stack Leadership) - End-to-end platform vision: Align backend, frontend, and mobile for unified experience",
      "Product & Platform Vision (Full-Stack Leadership) - Developer and user experience: Invest in DX/UX org-wide, drive culture of usability",
      "Product & Platform Vision (Full-Stack Leadership) - External API & platform strategy: Guide API productization, partner and ecosystem integrations",
      "Product & Platform Vision (Full-Stack Leadership) - Market & tech trends: Anticipate and leverage new technologies for business advantage",
      "Product & Platform Vision (Full-Stack Leadership) - Cross-org collaboration: Build bridges with product, design, security, and business",
      "Advanced Software Engineering - Org-wide architecture: Oversee reference architectures, best practices, and technical councils",
      "Advanced Software Engineering - Tech debt and risk: Set policies and budgets for tech debt, large-scale risk management",
      "Advanced Software Engineering - Compliance and audit: Ensure all backend systems meet regulatory and audit requirements",
      "Advanced Software Engineering - Open-source strategy: Guide company contributions and tech branding",
      "DevOps, Platform, & Reliability - Org-level SRE/DevOps: Build and empower high-impact SRE/DevOps teams",
      "DevOps, Platform, & Reliability - Platform investment: Set priorities for infrastructure, automation, and reliability",
      "DevOps, Platform, & Reliability - Security & compliance: Lead org-wide security initiatives, incident response, and audits",
      "DevOps, Platform, & Reliability - Vendor and cloud strategy: Guide cloud provider and toolchain selection, contract negotiation",
      "Executive Leadership, Influence & Collaboration - Executive alignment: Drive technical priorities at board, C-level, and cross-org level",
      "Executive Leadership, Influence & Collaboration - Talent strategy: Attract and retain top engineering leadership",
      "Executive Leadership, Influence & Collaboration - Change management: Lead org-wide transformations, manage resistance, and drive adoption",
      "Executive Leadership, Influence & Collaboration - Diversity, equity, inclusion: Set and champion inclusive engineering culture",
      "Executive Leadership, Influence & Collaboration - External representation: Represent company at conferences, in media, and with key partners",
    ],
    softSkills: [
      "Vision and storytelling: Inspire organization, communicate vision to diverse audiences",
      "Conflict resolution: Navigate C-level, board, and partner disagreements",
      "Strategic negotiation: Lead high-stakes vendor, talent, and partnership negotiations",
      "Empowerment: Grow and trust senior leaders, create scalable leadership pipelines",
      "Executive presence: Represent company, shape culture, and drive technical market leadership",
    ],
    responsibilities: [
      "Owns backend vision, aligns technical and business strategy at org level.",
    ],
    roadmap: {
      months: [
        "Month 1-3: Audit and set platform strategy, technical investment plan, and org structure",
        "Month 1-3: Launch DX/UX and documentation culture initiatives",
        "Month 4-6: Oversee major tech selection, vendor negotiations, and cross-org architecture reviews",
        "Month 4-6: Drive SRE, DevOps, security, and compliance programs",
        "Month 7-12: Present and defend technical vision to board/investors",
        "Month 7-12: Mentor and develop next generation of technical leaders",
        "Month 7-12: Lead M&A technical due diligence and integration",
      ],
      goals: [],
    },
    practicalTasks: [
      "Define and communicate a 3–5 year technical vision for backend and platform engineering",
      "Lead due diligence and integration plan for a major acquisition",
      "Oversee transformation from monolith to distributed platform across multiple business lines",
      "Sponsor org-wide documentation and developer experience initiatives",
      "Present technical strategy to board, investors, or external partners",
    ],
    quizzes: [
      "How do you balance innovation, stability, and compliance at scale?",
      "What's your approach to talent retention and leadership development?",
      "How do you choose between building, buying, or partnering for new tech capabilities?",
      "How do you use technical branding and open-source to recruit and position the company?",
      "What's your framework for technical decision-making under business uncertainty?",
    ],
    timeEstimate: { fullTime: "24-36 months", partTime: "30-48 months" },
  },
  {
    level: 11,
    title: "CTO / VP of Engineering (Backend Focus)",
    experience: "36-60 months",
    goal: "Lead the technology strategy and execution for the entire company. Shape the technical culture, platform, and talent needed for long-term business success. Serve as a critical executive partner to the CEO, board, and external stakeholders.",
    hardSkills: [
      "Company-Wide Technical Leadership - Corporate tech vision: Define and champion the company's long-term tech and platform strategy",
      "Company-Wide Technical Leadership - Tech/business alignment: Drive technical investments that maximize business impact",
      "Company-Wide Technical Leadership - Global architecture: Oversee architecture for all products, platforms, and regions",
      "Company-Wide Technical Leadership - Technology due diligence: Lead technical M&A, IPO, and investment evaluations",
      "Company-Wide Technical Leadership - R&D and innovation: Sponsor and guide breakthrough R&D and new technology exploration",
      "Organization, Talent & Culture - Org design: Structure and scale world-class engineering, SRE, DevOps, and platform teams",
      "Organization, Talent & Culture - Leadership pipeline: Attract, mentor, and retain exceptional technical leaders",
      "Organization, Talent & Culture - Diversity, equity, inclusion: Set and uphold standards for inclusive and high-performing teams",
      "Organization, Talent & Culture - Talent brand: Position company as a top destination for engineering talent",
      "Organization, Talent & Culture - Org change & transformation: Lead org-wide pivots, digital transformation, and culture change",
      "Platform, Product, & Full-Stack Vision - Platform productization: Guide creation of internal and external platforms/APIs as products",
      "Platform, Product, & Full-Stack Vision - Full-stack architecture: Oversee end-to-end architecture: backend, frontend, mobile, and data",
      "Platform, Product, & Full-Stack Vision - Market & tech trends: Anticipate, evaluate, and adopt emerging technologies and paradigms",
      "Platform, Product, & Full-Stack Vision - Open-source & ecosystem: Lead company's open-source strategy and community engagement",
      "Platform, Product, & Full-Stack Vision - Global scalability & reliability: Ensure platform can scale globally with high availability",
      "Data Structures, Algorithms, and Systems - Algorithmic innovation: Sponsor research and adoption of cutting-edge DSA for business advantage",
      "Data Structures, Algorithms, and Systems - Data platform strategy: Oversee strategy for big data, AI/ML, analytics, and compliance",
      "Data Structures, Algorithms, and Systems - Systemic risk & security: Set company-wide standards for resilience, privacy, and security",
      "Service Communication, Database, and Messaging - API & data strategy: Oversee internal and external API platform direction",
      "Service Communication, Database, and Messaging - DB/messaging vision: Set standards for all DB, messaging, and event-driven architectures",
      "Service Communication, Database, and Messaging - Data governance: Ensure compliance, data sovereignty, and global data policy",
      "Service Communication, Database, and Messaging - Vendor & ecosystem management: Negotiate strategic partnerships, alliances, and technology procurement",
      "Executive Full-Stack & Product Leadership - End-to-end product vision: Drive product and engineering strategy for all user and customer experiences",
      "Executive Full-Stack & Product Leadership - Partner with CPO/CEO: Shape business models, monetization, and product-market fit",
      "Executive Full-Stack & Product Leadership - Platform extensibility: Sponsor architectures for third-party integrations and ecosystem growth",
      "Executive Full-Stack & Product Leadership - Investment in DX/UX: Champion developer and user experience as business differentiators",
      "DevOps, Security & Compliance - Cloud & infrastructure vision: Lead hybrid/multi-cloud, cost optimization, and infra innovation",
      "DevOps, Security & Compliance - Security & compliance: Ultimate accountability for company's technical risk and compliance posture",
      "DevOps, Security & Compliance - Disaster recovery: Oversee global BCP, DR, and high-severity incident response",
      "Executive Presence & External Impact - Board & investor relations: Present technical vision, risks, and wins to board/investors",
      "Executive Presence & External Impact - Industry leadership: Represent company at industry events, with media, and in standards bodies",
      "Executive Presence & External Impact - M&A/IPO readiness: Lead technical workstreams for mergers, acquisitions, and public offerings",
      "Executive Presence & External Impact - Technology advocacy: Position company as a thought leader in the tech community",
    ],
    softSkills: [
      "Visionary storytelling: Articulate and inspire around the long-term technology future",
      "Executive influence: Align and negotiate at board, C-level, and market level",
      "Strategic decision-making: Make and defend bold, high-stakes technical bets",
      "Empowerment & succession: Develop leaders who can scale and sustain the tech org",
      "Crisis leadership: Lead company through high-impact technical crises and market shifts",
    ],
    responsibilities: [
      "Defines company-wide tech vision, leads transformation and innovation.",
    ],
    roadmap: {
      months: [
        "Months 1-3: Audit and define long-term technical and platform vision",
        "Months 1-3: Structure executive team and set talent brand strategy",
        "Months 1-3: Build executive relationships with board, product, and business",
        "Months 4-6: Oversee digital transformation or major platform initiative",
        "Months 4-6: Sponsor open-source/community engagement and R&D investments",
        "Months 7-12+: Lead technical workstreams for M&A or IPO as needed",
        "Months 7-12+: Launch org-wide DX/UX and culture change programs",
        "Months 7-12+: Present thought leadership at industry events and with media",
      ],
      goals: [],
    },
    practicalTasks: [
      "Develop and present a 5-year technology and platform vision to the board and investors",
      "Lead tech due diligence and post-merger integration for a major acquisition",
      "Oversee global digital transformation (e.g., cloud migration, platformization)",
      "Sponsor R&D and open-source initiatives that enhance company's market position",
      "Drive org-wide change management for new business models or pivots",
    ],
    quizzes: [
      "How do you balance core platform stability with disruptive innovation?",
      "What's your approach to setting and adjusting org design for rapid growth?",
      "How do you ensure alignment between technical, product, and business strategy?",
      "How do you evaluate and mitigate systemic technical risk at a global scale?",
      "What is your framework for representing the company's tech vision externally?",
    ],
    timeEstimate: { fullTime: "36-60 months", partTime: "48-72 months" },
  },
];
